Why?
https://redux.js.org/understanding/thinking-in-redux/three-principles

https://react-redux.js.org/introduction/getting-started
https://redux.js.org/tutorials/essentials/part-1-overview-concepts

Provider: The <Provider /> makes the Redux store available to any nested components that have been wrapped in the connect() function.
connect: The connect() function connects a React component to a Redux store.
middlewares: Middlewares provide a third-party extension point between dispatching an action, and the moment it reaches the reducer.
actions: Actions are payloads of information that send data from your application to your store. They are the only source of information for the store. You send them to the store using store.dispatch().

actions are events. They are the only way you can send data from your application to your Redux store. The data can be from user interactions, API calls, or even form submissions.

Actions are sent using the store.dispatch() method. Actions are plain JavaScript objects, and they must have a type property to indicate the type of action to be carried out. They must also have a payload that contains the information that should be worked on by the action. Actions are created via an action creator.

reducers: Reducers specify how the application’s state changes in response to actions sent to the store. Remember that actions only describe what happened, but don’t describe how the application’s state changes.

Reducers are pure functions that take the current state of an application, perform an action, and return a new state. These states are stored as objects, and they specify how the state of an application changes in response to an action sent to the store.

It is based on the reduce function in JavaScript, where a single value is calculated from multiple values after a callback function has been carried out.

* Reducers take the previous state of the app and return a new state based on the action passed to it.


How do I access Redux state in component?	
It's simple to get access to the store inside a React component – no need to pass the store as a prop or import it, just use the connect function from React Redux, and supply a mapStateToProps function that pulls out the data you need. Then, inside the component, you can pass that data to a function that needs it
   
Redux store methods 
getState for reading the current state of the application
dispatch for dispatching an action
subscribe for listening to state changes


@param reducer A function that returns the next state tree, given
 the current state tree and the action to handle.
 
 @param preloadedState The initial state. You may optionally specify it
  to hydrate the state from the server in universal apps, or to restore a
 previously serialized user session.
  If you use `combineReducers` to produce the root reducer function, this must be an object with the same shape as `combineReducers` keys.
 
  @param enhancer The store enhancer. You may optionally specify it
  to enhance the store with third-party capabilities such as middleware,
  time travel, persistence, etc. The only store enhancer that ships with Redux
 is `applyMiddleware()`.
 
 @returns A Redux store that lets you read the state, dispatch actions
 and subscribe to changes.
 
 
 Dispatches an action. It is the only way to trigger a state change.
   
   The `reducer` function, used to create the store, will be called with the
    current state tree and the given `action`. Its return value will
   be considered the **next** state of the tree, and the change listeners
    will be notified.
   
    The base implementation only supports plain object actions. If you want to
    dispatch a Promise, an Observable, a thunk, or something else, you need to
    wrap your store creating function into the corresponding middleware. For
   example, see the documentation for the `redux-thunk` package. Even the
   middleware will eventually dispatch plain object actions using this method.
   
    @param action A plain object representing “what changed”. It is
    a good idea to keep actions serializable so you can record and replay user
   sessions, or use the time travelling `redux-devtools`. An action must have
   a `type` property which may not be `undefined`. It is a good idea to use
   string constants for action types.
   
    @returns For convenience, the same action object you dispatched.
    Note that, if you use a custom middleware, it may wrap `dispatch()` to
    return something else (for example, a Promise you can await).
	
	function dispatch(action: A) {
    if (!isPlainObject(action)) {
      throw new Error(
        'Actions must be plain objects. ' +
          'Use custom middleware for async actions.'
      )
    }
