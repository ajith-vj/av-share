https://reactjs.org/docs/testing.html
https://testing-library.com/docs/react-testing-library/intro
https://github.com/testing-library/react-testing-library
Testing is a line-by-line review of how your code will execute. A suite of tests for an application comprises various bit of code to verify whether an application is executing successfully and without error. Testing also comes in handy when updates are made to code. After updating a piece of code, you can run a test to ensure that the update does not break functionality already in the application.
Why Test?
The first purpose of testing is to prevent regression. Regression is the reappearance of a bug that had previously been fixed. It makes a feature stop functioning as intended after a certain event occurs.
Testing ensures the functionality of complex components and modular applications.
Testing is required for the effective performance of a software application or product.

ADVANTAGES
It prevents unexpected regression.
It allows the developer to focus on the current task, rather than worrying about the past.
It allows modular construction of an application that would otherwise be too complex to build.
It reduces the need for manual verification.

DISADVANTAGES
You need to write more code, as well as debug and maintain.
Non-critical test failures might cause the app to be rejected in terms of continuous integration.

What is testing
Arrange
Act
Assert
Arrange, your app is in a certain original state. Act, then something happens (click event, input, etc.). Then you assert, or make a hypothesis, of the new state of your app. The tests will pass if your hypothesis is correct and fail if it is wrong.

Unlike your react components, your tests are not executed in the browser. Jest is the test runner and testing framework used by React.

Files with .js suffix in __tests__ folders.
Files with .test.js suffix.
Files with .spec.js suffix.

JasmineFramework
	describe() --> testSuite
	it()/ test() --> Testcase
	expect()
	
	describe('App component', ()=>{
		it("Add  success",()=>{
				expect().toTruty();
		}){
		}
	}){
	}
	
Focusing and Excluding Tests
You can replace it() with xit() to temporarily exclude a test from being executed.

Similarly, fit() lets you focus on a specific test without running any other tests.

Coverage Reporting
npm test -- --coverage
======================
Option 1: React Testing Library
react-testing-library is a library for testing React components in a way that resembles the way the components are used by end users. It is well suited for unit, integration, and end-to-end testing of React components and applications. It works more directly with DOM nodes, and therefore it's recommended to use with jest-dom for improved assertions.

To install react-testing-library and jest-dom, you can run:

npm install --save @testing-library/react @testing-library/jest-dom



Similar to enzyme you can create a src/setupTests.js file to avoid boilerplate in your test files:
import '@testing-library/jest-dom/extend-expect';



import React from 'react';
import { render } from '@testing-library/react';
import App from './App';
it('renders welcome message', () => {
  const { getByText } = render(<App />);
  expect(getByText('Learn React')).toBeInTheDocument();
});

======================
 
Create React App uses Jest as its test runner.

Jest is a delightful JavaScript Testing Framework with a focus on simplicity.

It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more!


Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.

Jest will look for test files with any of the following popular naming conventions:


npm install --save-dev jest

function sum(a, b) {
  return a + b;
}
module.exports = sum;


create a file named sum.test.js. This will contain our actual test:

const sum = require('./sum');

test('adds 1 + 2 to equal 3', () => {
  expect(sum(1, 2)).toBe(3);
});


Add the following section to your package.json:

{
  "scripts": {
    "test": "jest"
  }
}

Finally, run yarn test or npm run test


When you run npm test, Jest will launch in watch mode*. Every time you save a file, it will re-run the tests.

To create tests, add it() (or test()) blocks with the name of the test and its code. You may optionally wrap them in describe() blocks for logical grouping but this is neither required nor recommended.

Jest provides a built-in expect() global function for making assertions. A basic test could look like this:

import sum from './sum';
it('sums numbers', () => {
  expect(sum(1, 2)).toEqual(3);
  expect(sum(2, 2)).toEqual(4);
});


Option 2: Shallow Rendering
If youâ€™d like to test components in isolation from the child components they render, we recommend using shallow() rendering API from Enzyme. To install it, run:
npm install --save enzyme enzyme-adapter-react-16 react-test-renderer

or 
npm install --save-dev enzyme
npm install --save-dev enzyme-adapter-react-16

Enzyme introduces adapters to play well with different React versions. That's why you have to install such an adapter for your test setup too

Jest -->as the test runner, assertion library, and mocking library
Enzyme --> to provide additional testing utilities to interact with elements


src/setupTests.js
import { configure } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
configure({ adapter: new Adapter() });


import React from 'react';
import { shallow } from 'enzyme';
import App from './App';
it('renders without crashing', () => {
  shallow(<App />);
});



import React from 'react';
import { shallow } from 'enzyme';
import App from './App';
it('renders welcome message', () => {
  const wrapper = shallow(<App />);
  const welcome = <h2>Welcome to React</h2>;
  // expect(wrapper.contains(welcome)).toBe(true);
  expect(wrapper.contains(welcome)).toEqual(true);
});

npm install --save jest-enzyme

Import it in src/setupTests.js to make its matchers available in every test:

import 'jest-enzyme';

================


Mocha, Chai, Sinon + Enzyme: Node.js environment.
Jest + Enzyme/React Testing Library: If you want to test the more idiomatic way.

https://www.robinwieruch.de/react-testing-jest-enzyme
https://thomlom.dev/test-react-testing-library/